#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <Wire.h>
#include <RTClib.h>

const byte ROWS = 4;
const byte COLS = 4;

char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
RTC_DS3231 rtc;

const int RST_PIN = 5; // Chân reset MFRC522
const int SS_PIN = 10; // Chân SS (SDA) của MFRC522
MFRC522 mfrc522(SS_PIN, RST_PIN);

String inputCode = "";
String storedCode = "";
String fixedCode = "1234";
DateTime storedTime;

const int ledPin = 13;
const int relayPin = 12;

const unsigned long codeExpiryTime = 6 * 60;

bool isChangingPassword = false;
bool confirmCurrentPassword = false;
String newPassword = "";

bool isAddingCard = false; // Chế độ thêm thẻ
bool isRemovingCard = false; // Chế độ xóa thẻ

String allowedRFIDCards[10];
int rfidCardCount = 0;

void setup() {
  Serial.begin(9600);
  pinMode(ledPin, OUTPUT);
  pinMode(relayPin, OUTPUT);
  digitalWrite(ledPin, LOW);
  digitalWrite(relayPin, LOW);

  SPI.begin();
  mfrc522.PCD_Init();

  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, setting the time!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
}

void loop() {
  char key = keypad.getKey();

  if (key) {
    if (isChangingPassword) {
      handlePasswordChange(key);
    } else {
      handleNormalMode(key);
    }
  }

  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String rfidTag = getRFID();

    if (isAddingCard) {
      addRFIDCard(rfidTag);
    } else if (isRemovingCard) {
      removeRFIDCard(rfidTag);
    } else {
      checkAccessWithRFID(rfidTag);
    }

    mfrc522.PICC_HaltA();
  }

  DateTime now = rtc.now();
  if (storedCode != "" && now.unixtime() > storedTime.unixtime() + codeExpiryTime) {
    storedCode = "";
    Serial.println("Stored Code Automatically Cleared After 6 Minutes");
  }
}

String getRFID() {
  String rfidTag = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    rfidTag += String(mfrc522.uid.uidByte[i], HEX);
  }
  return rfidTag;
}

void addRFIDCard(String rfidTag) {
  if (rfidCardCount < 10) {
    allowedRFIDCards[rfidCardCount] = rfidTag;
    rfidCardCount++;
    Serial.println("Card Added: " + rfidTag);
  } else {
    Serial.println("RFID List Full, Cannot Add More Cards.");
  }
  isAddingCard = false;
}

void removeRFIDCard(String rfidTag) {
  for (int i = 0; i < rfidCardCount; i++) {
    if (allowedRFIDCards[i] == rfidTag) {
      Serial.println("Card Removed: " + rfidTag);
      allowedRFIDCards[i] = allowedRFIDCards[rfidCardCount - 1];
      rfidCardCount--;
      break;
    }
  }
  isRemovingCard = false;
}

void checkAccessWithRFID(String rfidTag) {
  for (int i = 0; i < rfidCardCount; i++) {
    if (allowedRFIDCards[i] == rfidTag) {
      Serial.println("Access Granted with RFID");
      digitalWrite(ledPin, HIGH);
      digitalWrite(relayPin, HIGH);
      delay(5000); // Mở khóa trong 5 giây
      digitalWrite(ledPin, LOW);
      digitalWrite(relayPin, LOW);
      return;
    }
  }
  Serial.println("Access Denied with RFID");
}

void handleNormalMode(char key) {
  if (key == '#') {
    Serial.println("Input Code: " + inputCode);
    DateTime now = rtc.now();
    if (inputCode == fixedCode || (inputCode == storedCode && now.unixtime() <= storedTime.unixtime() + codeExpiryTime)) {
      Serial.println("Access Granted");
      digitalWrite(ledPin, HIGH);
      digitalWrite(relayPin, HIGH);
    } else if (inputCode == storedCode && now.unixtime() > storedTime.unixtime() + codeExpiryTime) {
      Serial.println("Code Expired");
      storedCode = "";
      Serial.println("Stored Code Cleared");
      digitalWrite(ledPin, LOW);
    } else {
      Serial.println("Access Denied");
      digitalWrite(ledPin, LOW);
    }
    inputCode = "";
  } else if (key == '*') {
    inputCode = "";
    Serial.println("Code Cleared");
  } else if (key == 'A') {
    storedCode = inputCode;
    storedTime = rtc.now();
    Serial.println("New Code Set: " + storedCode);
    inputCode = "";
  } else if (key == 'B') {
    Serial.println("Enter Current Password:");
    isChangingPassword = true;
    confirmCurrentPassword = true;
    inputCode = "";
  } else if (key == 'C') {
    Serial.println("Scan a new card to add...");
    isAddingCard = true;
  } else if (key == 'D') {
    Serial.println("Scan a card to remove...");
    isRemovingCard = true;
  } else if (inputCode.length() < 4) {
    inputCode += key;
  }
}

void handlePasswordChange(char key) {
  if (key == '#') {
    if (confirmCurrentPassword) {
      if (inputCode == fixedCode) {
        Serial.println("Current Password Confirmed. Enter New Password:");
        confirmCurrentPassword = false;
        inputCode = "";
      } else {
        Serial.println("Incorrect Current Password. Exiting Change Mode.");
        isChangingPassword = false;
        confirmCurrentPassword = false;
        inputCode = "";
      }
    } else {
      fixedCode = inputCode;
      Serial.println("Password Changed Successfully.");
      isChangingPassword = false;
      inputCode = "";
    }
  } else if (key == '*') {
    inputCode = "";
    Serial.println("Code Cleared");
  } else if (inputCode.length() < 4) {
    inputCode += key;
  }
}
